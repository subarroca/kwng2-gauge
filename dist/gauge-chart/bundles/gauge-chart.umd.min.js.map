{"version":3,"sources":["ng://gauge-chart/lib/shared/gauge-segment.ts","ng://gauge-chart/lib/shared/gauge-label.ts","ng://gauge-chart/lib/gauge-chart.component.ts","ng://gauge-chart/lib/gauge-chart.module.ts"],"names":["GaugeSegment","options","this","radius","goal","value","color","bgColor","borderWidth","Object","defineProperty","prototype","Math","PI","computedRadius","GaugeLabel","text","x","y","fontSize","GaugeChartComponent","bgRadius","rounded","reverse","animationSecs","segmentsLoaded","isIE11","test","navigator","userAgent","segments","_this","sortedSegments","sortSegments","setTimeout","ngOnInit","sort","a","b","Component","args","selector","template","Input","GaugeChartModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"+TAyBA,IAAAA,EAAA,WASE,SAAAA,EAAYC,QAAA,IAAAA,IAAAA,EAAA,IAQVC,KAAKC,OAASF,EAAQE,QAAU,IAChCD,KAAKE,KAAOH,EAAQG,MAAQ,IAC5BF,KAAKG,MAAQJ,EAAQI,MACrBH,KAAKI,MAAQL,EAAQK,MACrBJ,KAAKK,QAAUN,EAAQM,SAAW,cAClCL,KAAKM,YAAcP,EAAQO,aAAe,IAgB9C,OAXEC,OAAAC,eAAIV,EAAAW,UAAA,iBAAc,KAAlB,WACE,OAAOT,KAAKC,OAASD,KAAKM,YAAc,mCAG1CC,OAAAC,eAAIV,EAAAW,UAAA,iBAAc,KAAlB,WACE,OAAU,EAAIC,KAAKC,GAAKX,KAAKY,eAAiBZ,KAAKG,MAAQH,KAAKE,KAAI,IAAI,EAAIQ,KAAKC,GAAKX,KAAKY,gDAG7FL,OAAAC,eAAIV,EAAAW,UAAA,sBAAmB,KAAvB,WACE,MAAO,KAAK,EAAIC,KAAKC,GAAKX,KAAKY,gDAEnCd,EAtCA,GCAAe,EAQE,SAAAA,EAAYd,QAAA,IAAAA,IAAAA,EAAA,IAOVC,KAAKI,MAAQL,EAAQK,MACrBJ,KAAKc,KAAOf,EAAQe,KACpBd,KAAKe,EAAIhB,EAAQgB,GAAK,EACtBf,KAAKgB,EAAIjB,EAAQiB,GAAK,EACtBhB,KAAKiB,SAAWlB,EAAQkB,UAAY,OC5CxCC,EAAA,WAoCE,SAAAA,IAzBSlB,KAAAmB,SAAW,IAEXnB,KAAAoB,SAAU,EACVpB,KAAAqB,SAAU,EACVrB,KAAAsB,cAAgB,GAgBzBtB,KAAAuB,gBAAiB,EAEjBvB,KAAAwB,OAAS,uBAAuBC,KAAKC,UAAUC,WAejD,OA7BEpB,OAAAC,eACIU,EAAAT,UAAA,WAAQ,KADZ,SACamB,GADb,IAAAC,EAAA7B,KAEEA,KAAKuB,gBAAiB,EACtBvB,KAAK8B,eAAiB9B,KAAK+B,aAAaH,GAGxCI,WACE,WAAM,OAAAH,EAAKN,gBAAiB,GAC5B,oCAWJL,EAAAT,UAAAwB,SAAA,aAGAf,EAAAT,UAAAsB,aAAA,SAAaH,GAAb,IAAAC,EAAA7B,KACE,OAAO4B,GAAYA,EAASM,KAAK,SAACC,EAAiBC,GACjD,OAAIP,EAAKR,QACCc,EAAEhC,MAAQgC,EAAEjC,KAAOkC,EAAEjC,MAAQiC,EAAElC,KAAQ,GAAK,EAC9CiC,EAAEhC,MAAQgC,EAAEjC,KAAOkC,EAAEjC,MAAQiC,EAAElC,MAAS,EAAI,yBAxCzDmC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,iBACVC,SAAA,08CAICC,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,6BACAA,EAAAA,sBAEAA,EAAAA,wBAEAA,EAAAA,SA6BHvB,EAhDA,GCAAwB,EAAA,WAIA,SAAAA,KAOgC,2BAP/BC,EAAAA,SAAQL,KAAA,CAAC,CACRM,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAAC5B,GACf6B,QAAS,CAAC7B,OAEoBwB,EAXhC","sourcesContent":["/**\n * @category   Model\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n**/\n\n\n\n\n// ANGULAR\n\n\n\n\n// EXTERNAL\n\n\n\n\n// OWN\n\n\n\n\n\nexport class GaugeSegment {\n  radius: number;\n  goal: number;\n  value: number;\n  color: string;\n  bgColor: string;\n  borderWidth: number;\n\n\n  constructor(options: {\n    radius?: number,\n    goal?: number,\n    value?: number,\n    color?: string,\n    bgColor?: string,\n    borderWidth?: number\n  } = {}) {\n    this.radius = options.radius || 100;\n    this.goal = options.goal || 100;\n    this.value = options.value;\n    this.color = options.color;\n    this.bgColor = options.bgColor || 'transparent';\n    this.borderWidth = options.borderWidth || 100;\n  }\n\n\n\n  get computedRadius() {\n    return this.radius - this.borderWidth / 2;\n  }\n\n  get strokeProgress(this: GaugeSegment) {\n    return `${2 * Math.PI * this.computedRadius * this.value / this.goal} ${2 * Math.PI * this.computedRadius}`;\n  }\n\n  get strokeEmptyProgress(this: GaugeSegment) {\n    return `0 ${2 * Math.PI * this.computedRadius}`;\n  }\n}\n","/**\n * @category   Model\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n**/\n\n\n\n\n// ANGULAR\n\n\n\n\n// EXTERNAL\n\n\n\n\n// OWN\n\n\n\n\n\nexport class GaugeLabel {\n  color: string;\n  text: string;\n  x: number;\n  y: number;\n  fontSize: string;\n\n\n  constructor(options: {\n    color?: string,\n    text?: string,\n    x?: number,\n    y?: number,\n    fontSize?: string\n  } = {}) {\n    this.color = options.color;\n    this.text = options.text;\n    this.x = options.x || 0;\n    this.y = options.y || 0;\n    this.fontSize = options.fontSize || '1em';\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { GaugeLabel } from './shared/gauge-label';\nimport { GaugeSegment } from './shared/gauge-segment';\n\n@Component({\n  selector: 'ng-gauge-chart',\n  templateUrl: './gauge-chart.component.html',\n  styleUrls: ['./gauge-chart.component.css']\n})\nexport class GaugeChartComponent implements OnInit {\n  @Input() bgRadius = 100;\n  @Input() bgColor: string;\n  @Input() rounded = true;\n  @Input() reverse = false;\n  @Input() animationSecs = 0.5;\n\n  @Input() labels: GaugeLabel[];\n\n  @Input()\n  set segments(segments: GaugeSegment[]) {\n    this.segmentsLoaded = false;\n    this.sortedSegments = this.sortSegments(segments);\n\n    // wait a bit and start animation\n    setTimeout(\n      () => this.segmentsLoaded = true,\n      0);\n  }\n\n  sortedSegments: GaugeSegment[];\n  segmentsLoaded = false;\n\n  isIE11 = /Trident.*rv[ :]*11\\./.test(navigator.userAgent);\n\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  sortSegments(segments: GaugeSegment[]) {\n    return segments && segments.sort((a: GaugeSegment, b: GaugeSegment) => {\n      if (this.reverse)\n        return (a.value / a.goal > b.value / b.goal) ? 1 : -1;\n      return (a.value / a.goal > b.value / b.goal) ? -1 : 1;\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GaugeChartComponent } from './gauge-chart.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [GaugeChartComponent],\n  exports: [GaugeChartComponent]\n})\nexport class GaugeChartModule { }\n"]}